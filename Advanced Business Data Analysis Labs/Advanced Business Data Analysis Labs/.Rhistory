setwd('C:/DEV/GIT Repos/datascience/Advanced Business Data Analysis/CA1')
crohns_data <- read.csv('CrohnD.csv')
names(crohns_data)
summary(crohns_data)
t.test(crohns_data$sex, crohns_data$nrAdvE, alternative = "two.sided", paired = FALSE)
t.test(crohns_data$nrAdvE, crohns_data$sex, alternative = "two.sided", paired = FALSE)
t.test(crohns_data$nrAdvE~crohns_data$sex, alternative = "two.sided", paired = FALSE)
tresult<-t.test(crohns_data$nrAdvE~crohns_data$sex, alternative = "two.sided", paired = FALSE)
names(tresult)
summary(tresult)
tresult.parameter
tresult$statistic
tresult$parameter
tresult<-t.test(crohns_data$nrAdvE~crohns_data$sex, alternative = "two.sided", paired = FALSE)
names(tresult)
tresult
plot(crohns_data$sex, crohns_data$nrAdvE)
plot(tresult)
plot(crohns_data$sex, crohns_data$nrAdvE, xlab="Number of Adverse Events Recorded")
plot(crohns_data$sex, crohns_data$nrAdvE, xlab="Sex" ,ylab="Number of Adverse Events Recorded")
plot(crohns_data$sex, crohns_data$nrAdvE, xlab="Sex" ,ylab="Number of Adverse Events Recorded", main="Boxplot of Number of Adverse Events by Sex")
tresult<-t.test(crohns_data$nrAdvE~crohns_data$sex, alternative = "two.sided", paired = FALSE, mu = 0)
tresult
tresult<-t.test(crohns_data$nrAdvE~crohns_data$sex, alternative = "two.sided", paired = FALSE, mu = 0, conf.level = '0.01')
tresult<-t.test(crohns_data$nrAdvE~crohns_data$sex, alternative = "two.sided", paired = FALSE, mu = 0, conf.level = 0.01)
tresult
tresult<-t.test(crohns_data$nrAdvE~crohns_data$sex, alternative = "two.sided", paired = FALSE, mu = 0, conf.level = 0.005)
tresult
tresult<-t.test(crohns_data$nrAdvE~crohns_data$sex, alternative = "two.sided", paired = FALSE, mu = 0, conf.level = 0.01)
tresult
names(tresult)
tresult<-t.test(crohns_data$nrAdvE~crohns_data$sex, alternative = "two.sided", paired = FALSE, mu = 0, conf.level = 0.99)
tresult
qt(tresult$statistic*0.005, df = tresult$parameter)
tresult$statistic
qt(tresult$statistic * 0.005, df = tresult$parameter)
qt(1-tresult$statistic * 0.005, df = tresult$parameter)
qt(1$statistic * 0.005, df = tresult$parameter)
qt(tresult$statistic * 0.005, df = tresult$parameter)
qt(tresult$statistic * 0.005, df = 20)
qt(-0.95 * 0.005, df = 20)
qt(-0.95*0.005, df = 20)
qt(-0.95, df = 20)
qt(p =-0.95, df = 20,)
oneway.test(nrAdvE ~ treat, var.equal = TRUE, data = crohns_data)
aovresult <- oneway.test(nrAdvE ~ treat, var.equal = TRUE, data = crohns_data)
names aovresult
names(aovresult)
aovresult <- oneway.test(nrAdvE ~ treat,  data = crohns_data)
aovresult
aovresult <- oneway.test(treat ~ nrAdvE, data = crohns_data)
names(aovresult)
warnings()
aovresult <- oneway.test(nrAdvE~treat, data = crohns_data)
aovresult
aovresult <- aov(nrAdvE~treat, data = crohns_data)
names(aovresult)
warnings()
aovresult
names(aovresult)
aovresult$model
names(aovresult)
aovresult
aovresult$xlevels
aovresult$contrasts
aovresult$qr
aovresult$terms
names(aovresult)
summary(Aovresult)
summary(aovresult)
aovresult
aovmodel2 <- aov(nrAdvE ~ treat * sex, data = crohns_data)
summary(aovmodel2)
aovmodel <- aov(nrAdvE ~ treat * BMI, data = crohns_data)
summary(aovmodel)
aovmodel2 <- aov(nrAdvE ~ treat * sex, data = crohns_data)
summary(aovmodel2)
plot(nrAdvE ~ treat + sex, data = crohns_Data)
plot(nrAdvE ~ treat + sex, data = crohns_data)
par(mfrow = c(2, 1))
plot(nrAdvE ~ treat + sex, data = crohns_data)
setwd('C:/DEV/GIT Repos/datascience/Advanced Business Data Analysis/CA1')
crohns_data <- read.csv('CrohnD.csv')
par(mfrow = c(2, 1))
plot(nrAdvE ~ treat + sex, data = crohns_data)
setwd('C:/DEV/GIT Repos/datascience/Advanced Business Data Analysis/CA1')
crohns_data <- read.csv('CrohnD.csv')
interaction.plot(crohns_data$treat, crohns_data$sex, crohns_data$nrAdvE)
interaction.plot(crohns_data$sex, crohns_data$treat, crohns_data$nrAdvE)
interaction.plot(crohns_data$treat, crohns_data$sex, crohns_data$nrAdvE, ylab = "Mean Number of Adverse Events" ,col=c(red, blue, green))
interaction.plot(crohns_data$treat, crohns_data$sex, crohns_data$nrAdvE, ylab = "Mean Number of Adverse Events" ,col=c("red", "blue", "green"))
interaction.plot(crohns_data$sex, crohns_data$treat, crohns_data$nrAdvE, ylab = "Mean Number of Adverse Events", col = c("red", "blue", "green"))
interaction.plot(crohns_data$sex, crohns_data$treat, crohns_data$nrAdvE, ylab = "Mean Number of Adverse Events", col = c("red", "blue", "black"))
interaction.plot(crohns_data$treat, crohns_data$sex, crohns_data$nrAdvE, ylab = "Mean Number of Adverse Events", col = c("red", "blue"), lty = 1, lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$sex, crohns_data$treat, crohns_data$nrAdvE, ylab = "Mean Number of Adverse Events", col = c("red", "blue", "black"), lty = 1, lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$sex, crohns_data$treat, crohns_data$nrAdvE, ylab = "Mean Number of Adverse Events", col = c("red", "blue", "black"), lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$treat, crohns_data$sex, crohns_data$nrAdvE, xlab="Sex", ylab = "Mean Number of Adverse Events", col = c("red", "blue"), lty = 1, lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$sex, crohns_data$treat, crohns_data$nrAdvE, xlab = "Sex", ylab = "Mean Number of Adverse Events", col = c("red", "blue", "black"), lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$treat, crohns_data$sex, crohns_data$nrAdvE, xlab="Sex", ylab = "Mean Number of Adverse Events", col = c("red", "blue"), lty = C(1,2,3), lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$sex, crohns_data$treat, crohns_data$nrAdvE, xlab = "Sex", ylab = "Mean Number of Adverse Events", col = c("red", "blue", "black"), lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$treat, crohns_data$sex, crohns_data$nrAdvE, xlab="Sex", ylab = "Mean Number of Adverse Events", col = c("red", "blue"), lty = C(1,2,3), lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$treat, crohns_data$sex, crohns_data$nrAdvE, xlab="Sex", ylab = "Mean Number of Adverse Events", col = c("red", "blue"), lty = c(1,2,3), lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$sex, crohns_data$treat, crohns_data$nrAdvE, xlab = "Sex", ylab = "Mean Number of Adverse Events", col = c("red", "blue", "black"), lwd = 3, leg.bty = "o")
interaction.plot(crohns_data$treat, crohns_data$sex, crohns_data$nrAdvE, xlab="Treatment", ylab = "Mean Number of Adverse Events", col = c("red", "blue"), lty = c(1,2,3), lwd = 3, leg.bty = "o")
chisq.test(c(315, 108, 101, 32), p = c(9 / 16, 3 / 16, 3 / 16, 1 / 16))
chisq.test(c(12, 16, 10, 11, 10, 12, 18), p = c(1 / 7, 1 / 7, 1 / 7, 1 / 7, 1 / 7, 1 / 7, 1 / 7))
pollingData <- as.table(rbind(c(190, 155, 55), c(240, 290, 70)))
dimnames(pollingData) <- list(gender = c("Male", "Female"), treatment = c("Left Wing", "Centre", "Right Wing"))
(pollingChi <- chisq.test(pollingData)) # Prints test summary
pollingChi$observed # observed counts
pollingChi$expected # expected counts
chisq.post.hoc(pollingData)
Chisquare
install.packages('fifer')
library('fifer')
chisq.post.hoc(pollingData)
prostateData <- as.table(rbind(c(8177, 8117, 8147, 8167), c(575, 620, 555, 529)))
dimnames(prostateData) <- list(outcome = c("No Cancer", "Prostate Cancer"), treatment = c("Selenium", "Vitamin E", "Selenium and E", "Placebo"))
prostateData
prostateChi <- chisq.test(prostateData)
prostateChi
chisqp.post.hoc(prostateChi)
chisq.post.hoc(prostateChi)
chisq.post.hoc(prostateData)
data_paire <- reac.csv('LanguageScores.csv', head = TRUE, sep=',')
data_paire <- read.csv('LanguageScores.csv', head = TRUE, sep=',')
data_paired <- read.csv('LanguageScores.csv', head = TRUE, sep=',')
t.test(data_paired$Sample.A, data_paired$Sample.B, alternative = "two.sided", paired = TRUE)
data_paired
t.test(data_paired$Pre.test, data_paired$Post.test, alternative = "two.sided", paired = TRUE)
data("mtcars")
mtcars
hc<-hlust(dist(mtcars))
hc<-hclust(dist(mtcars))
plot(hc)
hchc
hc
plot(hc, hang=-1)
install.packages("ape")
plot (as.phylo(hc), cex.0.9, label.offset=1)
library("ape")
plot (as.phylo(hc), cex.0.9, label.offset=1)
plot (as.phylo(hc), cex=0.9, label.offset=1)
plot (as.phylo(hc), cex=0.5, label.offset=1)
plot (as.phylo(hc), cex=1, label.offset=1)
plot (as.phylo(hc), cex=10, label.offset=1)
plot (as.phylo(hc), cex=0.8, label.offset=1)
plot (as.phylo(hc), cex=0.8, label.offset=10)
plot (as.phylo(hc), cex=0.8, label.offset=-1)
plot (as.phylo(hc), cex=0.8, label.offset=0)
library(shiny)
# define UI for application, sets an UI object
shinyUI <- fluidPage("Hello World")
# Define server logic required to draw a chart, sets a server object
shinyServer <- function(input, output) {}
# combines the two objects defined above into a shiny app
shinyApp(ui = shinyUI, server = shinyServer)
install.packages("shiny")
shinyUI <- fluidPage("Hello World")
install.packages("fluidpage")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("fluidpage")
install.packages("fluidPage")
shinyUI <- fluidPage("Hello World")
shinyServer <- function(input, output) {}
shinyApp(ui = shinyUI, server = shinyServer)
shinyUI <- fluidPage(   sliderInput(inputId = "num",               label = "Choose a number",               min = 10, max = 100, value = 20) )
# Define server logic required to draw a chart, sets a server object
shinyServer <- function(input, output) {}
# combines the two objects defined above into a shiny app
shinyApp(ui = shinyUI, server = shinyServer)
shinyUI <- fluidPage(   sliderInput(inputId = "num",               label = "Choose a number",               min = 10, max = 100, value = 20),   plotOutput("hist") )
# Define server logic required to draw a chart, sets a server object
shinyServer <- function(input, output) {}
# combines the two objects defined above into a shiny app
shinyApp(ui = shinyUI, server = shinyServer)
shinyUI <- fluidPage(
  sliderInput(inputId = "num",
              label = "Choose a number",
              min = 1, max = 100, value = 20),
  plotOutput("hist")
)
shinyServer <- function(input, output) {
  output$hist <- renderPlot({
    hist(rnorm(input$num))
  })
}
